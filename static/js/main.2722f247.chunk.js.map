{"version":3,"sources":["components/Timer.js","components/BreakController.js","components/SessionController.js","App.js","serviceWorker.js","index.js"],"names":["Timer","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","state","isSession","timerSeconds","intervalId","alarmColor","color","play","bind","_assertThisInitialized","stop","reset","decreaseTimer","startAlarm","_createClass","key","value","setInterval","this","setState","timerMinute","playBeep","onToggleInterval","updateTimerMinute","prevState","clearInterval","onResetTimer","refs","beepSound","console","log","React","createElement","className","style","id","onClick","ref","src","type","Component","BreakController","decreaseBreak","breakInterval","increaseBreak","SessionController","decreaseSession","sessionLength","increaseSession","App","breakLength","onIncreaseBreakLength","onDecreaseBreakLength","onIncreaseSessionLength","onDecreaseSessionLength","onUpdateTimerMinute","_this2","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2722f247.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Timer.css';\n\n\nclass Timer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSession: true,\n            timerSeconds: 0,\n            intervalId: 0,\n            alarmColor: {color: '#EA3B2E'}\n        }\n        this.play = this.play.bind(this);\n        this.stop = this.stop.bind(this);\n        this.reset = this.reset.bind(this);\n        this.decreaseTimer = this.decreaseTimer.bind(this);\n        this.startAlarm = this.startAlarm.bind(this);\n    }\n\n    play() {\n        let intervalId = setInterval(this.decreaseTimer, 1000);\n        this.setState({\n            intervalId: intervalId\n        })\n    }\n\n    startAlarm() {\n        if ((this.props.timerMinute === 0) && (this.state.timerSeconds === 1)) {\n            this.setState({\n                alarmColor: {color: 'red'}\n            });\n            this.playBeep();\n        }\n    }\n\n    decreaseTimer() {\n        switch (this.state.timerSeconds) {\n            case 0:\n                if (this.props.timerMinute === 0) {\n                    if (this.state.isSession) {\n                        this.setState({\n                            isSession: false,\n                            alarmColor: {color: 'green'}\n                        })\n                        this.props.onToggleInterval(this.state.isSession);\n                    } else {\n                        this.setState({\n                            isSession: true,\n                            alarmColor: {color: '#EA3B2E'}\n                        })\n                        this.props.onToggleInterval(this.state.isSession);\n                    }\n                }\n                this.props.updateTimerMinute()\n                this.setState({\n                    timerSeconds: 59\n                })\n                break;\n            case 1:\n                if (this.props.timerMinute === 0) {\n                    this.startAlarm();\n                }\n            default:\n                this.setState((prevState) => {\n                    return {\n                        timerSeconds: prevState.timerSeconds - 1\n                    }\n                })\n                break;\n\n        }\n    }\n\n    stop() {\n        clearInterval(this.state.intervalId)\n    }\n\n    reset() {\n        this.stop();\n        this.props.onResetTimer()\n        this.setState({\n            timerSeconds: 0,\n            alarmColor: {color: '#EA3B2E'},\n            isSession: true\n        })\n    }\n\n    playBeep() {\n        this.refs.beepSound.play();\n    }\n\n    render() {\n        console.log(this.state.timerSeconds)\n        return (\n            <div>\n                <div className=\"timer\" style={this.state.alarmColor}>\n                    <div id=\"timer-label\">{this.state.isSession === true ? 'Session' : 'Break'}</div>\n                    <div id=\"time-left\">\n                        <span>{this.props.timerMinute}</span>:\n                        <span>{this.state.timerSeconds === 0 ? '00' : this.state.timerSeconds < 10 ? '0' + this.state.timerSeconds : this.state.timerSeconds}</span>\n                    </div>\n                </div>\n                <div className=\"timer-control\">\n                    <button onClick={this.play} id=\"start_stop\" className=\"btn-control\"><i\n                        className=\"fa fa-play fa-2x\"></i></button>\n                    <button onClick={this.stop} className=\"btn-control\"><i className=\"fa fa-pause fa-2x\"></i></button>\n                    <button onClick={this.reset} id=\"reset\" className=\"btn-control\"><i\n                        className=\"fa fa-refresh fa-2x\"></i></button>\n                    <audio\n                        id=\"beep\"\n                        ref=\"beepSound\"\n                        src=\"https://api.coderrocketfuel.com/assets/pomodoro-times-up.mp3\"\n                    >\n                        <source\n                            src=\"https://api.coderrocketfuel.com/assets/pomodoro-times-up.mp3\"\n                            type=\"audio/mpeg\"\n                        />\n                    </audio>\n                </div>\n            </div>\n\n        )\n    }\n}\n\nexport default Timer","import React from 'react';\n\n\nfunction BreakController(props) {\n\n\n    return (\n        <div className=\"length-control\">\n\n            <div id=\"break-label\" className=\"labels\">Break Length</div>\n            <div className=\"controls\">\n                <button onClick={props.decreaseBreak} id=\"break-decrement\" className=\"btn-level btn\" value=\"-\"><i\n                    className=\"fa fa-arrow-down fa-2x\"></i></button>\n                <div id=\"break-length\" className=\"btn-level\">{props.breakInterval}</div>\n                <button onClick={props.increaseBreak} id=\"break-increment\" className=\"btn-level btn\" value=\"+\"><i\n                    className=\"fa fa-arrow-up fa-2x\"></i></button>\n            </div>\n        </div>\n\n\n    )\n\n}\n\nexport default BreakController","import React from 'react';\n\n\nfunction SessionController(props) {\n\n    return (\n        <div className=\"length-control\">\n\n            <div id=\"session-label\" className=\"labels\">Session Length</div>\n            <div className=\"controls\">\n                <button onClick={props.decreaseSession} id=\"session-decrement\" className=\"btn-level btn\" value=\"-\"><i\n                    className=\"fa fa-arrow-down fa-2x\"></i></button>\n                <div id=\"session-length\" className=\"btn-level\">{props.sessionLength}</div>\n                <button onClick={props.increaseSession} id=\"session-increment\" className=\"btn-level btn\" value=\"+\"><i\n                    className=\"fa fa-arrow-up fa-2x\"></i></button>\n            </div>\n        </div>\n    )\n\n}\n\nexport default SessionController","import React, {Component} from 'react';\nimport Timer from './components/Timer';\nimport BreakController from './components/BreakController';\nimport SessionController from './components/SessionController';\nimport Sound from './components/Sound';\nimport './App.css';\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            breakLength: 1,\n            sessionLength: 5,\n            timerMinute: 5\n        }\n        this.onIncreaseBreakLength = this.onIncreaseBreakLength.bind(this);\n        this.onDecreaseBreakLength = this.onDecreaseBreakLength.bind(this);\n        this.onIncreaseSessionLength = this.onIncreaseSessionLength.bind(this);\n        this.onDecreaseSessionLength = this.onDecreaseSessionLength.bind(this);\n        this.onToggleInterval = this.onToggleInterval.bind(this);\n        this.onUpdateTimerMinute = this.onUpdateTimerMinute.bind(this);\n        this.onResetTimer = this.onResetTimer.bind(this);\n    }\n\n    onIncreaseBreakLength() {\n        if (this.state.breakLength === 60) {\n            return;\n        }\n        this.setState((prevState) => {\n            return {\n                breakLength: prevState.breakLength + 1,\n\n            }\n        })\n    }\n\n    onDecreaseBreakLength() {\n        if (this.state.breakLength === 1) {\n            return;\n        }\n        this.setState((prevState) => {\n            return {\n                breakLength: prevState.breakLength - 1\n            }\n        })\n    }\n\n    onIncreaseSessionLength() {\n        if (this.state.sessionLength === 60) {\n            return;\n        }\n        this.setState((prevState) => {\n            return {\n                sessionLength: prevState.sessionLength + 1,\n                timerMinute: prevState.sessionLength + 1\n            }\n        })\n    }\n\n    onDecreaseSessionLength() {\n        if (this.state.sessionLength === 1) {\n            return;\n        }\n        this.setState((prevState) => {\n            return {\n                sessionLength: prevState.sessionLength - 1,\n                timerMinute: prevState.sessionLength - 1\n            }\n        })\n    }\n\n    onUpdateTimerMinute() {\n        this.setState((prevState) => {\n            return {\n                timerMinute: prevState.timerMinute - 1\n            }\n        })\n    }\n\n    onToggleInterval(isSession) {\n        if (isSession) {\n            this.setState((prevState) => {\n                return {\n                    timerMinute: this.state.sessionLength\n                }\n            })\n        } else {\n            this.setState((prevState) => {\n                return {\n                    timerMinute: this.state.breakLength\n                }\n            })\n        }\n    }\n\n    onResetTimer() {\n        this.setState({\n            breakLength: 1,\n            sessionLength: 1,\n            timerMinute: 5\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"main\">\n                <h1>Timer!</h1>\n                <p>Get ready, steady & go</p>\n                <div className='wrapper'>\n                    <div className='controllers'>\n                        <BreakController breakInterval={this.state.breakLength}\n                                         increaseBreak={this.onIncreaseBreakLength}\n                                         decreaseBreak={this.onDecreaseBreakLength}\n                        />\n                        <SessionController\n                            sessionLength={this.state.sessionLength}\n                            increaseSession={this.onIncreaseSessionLength}\n                            decreaseSession={this.onDecreaseSessionLength}\n                        />\n                    </div>\n                    <Timer timerMinute={this.state.timerMinute}\n                           breakLength={this.state.breakLength}\n                           updateTimerMinute={this.onUpdateTimerMinute}\n                           onToggleInterval={this.onToggleInterval}\n                           onResetTimer={this.onResetTimer}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}